{"version":3,"sources":["../src/index.tsx","../src/api.ts","../src/components/cast-images.tsx","../src/client/video-player-client.tsx","../src/components/video-player.tsx","../src/components/cast-videos.tsx","../src/components/icons.tsx","../src/components/cast-text-formatter.tsx","../src/components/cast.tsx","../src/options.ts"],"sourcesContent":["import \"server-only\";\nimport { getCast } from \"./api\";\nimport { CastEmbed } from \"./components/cast\";\nimport { FarcasterEmbedOptions, defaultOptions } from \"./options\";\nimport { CastData } from \"./types\";\n\n/**\n * Renders a Farcaster embed for a cast. You can use two methods to render a Farcaster embed:\n * 1. Providing a Farcaster URL to a cast (url)\n * 2. Providing a username and hash of a cast (username, hash)\n * @param url Farcaster URL for the cast.\n * @param username Username of the cast author.\n * @param hash Hash of the cast.\n * @param castData Optional cast data. If provided, the API call to fetch the cast data will be skipped.\n * @param options Custom overrides. See FarcasterEmbedOptions type for available options.\n * @returns React JSX Component\n */\nexport async function FarcasterEmbed({\n  url,\n  username,\n  hash,\n  castData,\n  options,\n}: {\n  url?: string;\n  username?: string;\n  hash?: string;\n  castData?: CastData;\n  options?: FarcasterEmbedOptions;\n}) {\n  // If a URL is provided, parse the username and hash from it.\n  if (url) {\n    const urlParts = url.split(\"/\");\n    username = urlParts[3];\n    hash = urlParts[4];\n  }\n\n  if (!castData && (!username || !hash)) {\n    throw new Error(\n      \"You must provide a Farcaster URL or username and hash to embed a cast. Or provide your own castData to render the component.\",\n    );\n  }\n\n  const cast = castData ?? (await getCast(username, hash, { ...defaultOptions, ...options }));\n\n  return <CastEmbed cast={cast} options={{ ...defaultOptions, ...options }} />;\n}\n","import type { FarcasterEmbedOptions } from \"./options\";\n\nexport const getCast = async (username: string, hash: string, options?: FarcasterEmbedOptions) => {\n  try {\n    const res = await fetch(\n      options?.customEndpoint\n        ? `${options?.customEndpoint}/${username}/${hash}`\n        : `https://farcaster.tv/${username}/${hash}`,\n    );\n    const cast = await res.json();\n\n    if (cast.result.casts[0].hash === \"0x0000000000000000000000000000000000000000\") {\n      throw new Error(\"Root cast has been deleted.\");\n    }\n\n    return cast.result.casts.findLast(cast => cast.hash.includes(hash))\n  } catch (e) {\n    console.error(e);\n\n    if (!options?.silentError) {\n      throw new Error(\n        `Unable to fetch cast ${hash} by ${username} as it most likely does not exist anymore.${\n          options?.customEndpoint\n            ? \" You are using a custom endpoint (\" +\n              options?.customEndpoint +\n              \"). Make sure it is correct and the server is running. For more info about the proxy server check the README.\"\n            : \"\"\n        }`,\n      );\n    }\n  }\n};\n","import type { CastImage } from \"../types\";\n\nexport function CastImages({ images }: { images: CastImage[] }) {\n  return (\n    <div className=\"farcaster-embed-image-container\">\n      {images.map((image: CastImage) => {\n        return (\n          <a key={image.url} href={image.url} target=\"_blank\" className=\"farcaster-embed-image-link\">\n            <img src={image.url} alt={image.alt} className=\"farcaster-embed-image\" />\n          </a>\n        );\n      })}\n    </div>\n  );\n}\n","\"use client\";\nimport React from \"react\";\n\nexport function VideoPlayerClient({\n  source,\n  poster,\n  aspectRatio,\n}: {\n  source: string;\n  poster: string;\n  aspectRatio: number;\n}) {\n  const [isMediaChromeLoaded, setIsMediaChromeLoaded] = React.useState(false);\n  const [isHlsVideoElementLoaded, setIsHlsVideoElementLoaded] = React.useState(false);\n\n  if (!source) {\n    return null;\n  }\n\n  const loadScript = (src: string) => {\n    return new Promise((resolve, reject) => {\n      const script = document.createElement(\"script\");\n      script.src = src;\n      script.type = \"module\";\n      script.onload = () => resolve(script);\n      script.onerror = () => reject(new Error(`[react-farcaster-embed] Script load error for ${src}`));\n      document.head.appendChild(script);\n    });\n  };\n\n  React.useEffect(() => {\n    const mediaChrome = \"https://cdn.jsdelivr.net/npm/media-chrome@1/+esm\";\n    const hlsVideoElement = \"https://cdn.jsdelivr.net/npm/hls-video-element@1.0/+esm\";\n\n    loadScript(mediaChrome)\n      .then(() => {\n        setIsMediaChromeLoaded(true);\n      })\n      .catch((error) => {\n        console.error(\"Media Chrome loading failed\", error);\n      });\n\n    loadScript(hlsVideoElement)\n      .then(() => {\n        setIsHlsVideoElementLoaded(true);\n      })\n      .catch((error) => {\n        console.error(\"HLS Video Element loading failed\", error);\n      });\n\n    return () => {\n      document.head.removeChild(document.head.querySelector(`script[src=\"${mediaChrome}\"]`));\n      document.head.removeChild(document.head.querySelector(`script[src=\"${hlsVideoElement}\"]`));\n    };\n  }, [source, poster, aspectRatio]);\n\n  return (\n    <div\n      style={{\n        aspectRatio,\n      }}\n    >\n      {isMediaChromeLoaded && isHlsVideoElementLoaded && (\n        <div\n          className=\"farcaster-embed-video-player\"\n          dangerouslySetInnerHTML={{\n            __html: `<media-controller>\n            <hls-video\n              src=\"${source}\"\n              slot=\"media\"\n              volume=\"1\"\n              crossorigin\n              playsinline\n            ></hls-video>\n            <media-poster-image\n              slot=\"poster\"\n              src=\"${poster}\">\n            </media-poster-image>\n            <media-loading-indicator slot=\"centered-chrome\" noautohide></media-loading-indicator>\n            <media-control-bar>\n              <media-play-button></media-play-button>\n              <media-time-range></media-time-range>\n              <media-time-display showduration remaining></media-time-display>\n              <media-fullscreen-button></media-fullscreen-button>\n            </media-control-bar>\n          </media-controller>`,\n          }}\n        ></div>\n      )}\n    </div>\n  );\n}\n","export function VideoPlayer({ source, poster, aspectRatio }: { source: string; poster: string; aspectRatio: number }) {\n  if (!source) {\n    return null;\n  }\n\n  return (\n    <div\n      style={{\n        aspectRatio,\n      }}\n    >\n      <div\n        className=\"farcaster-embed-video-player\"\n        suppressHydrationWarning\n        dangerouslySetInnerHTML={{\n          __html: `<script type=\"module\" src=\"https://cdn.jsdelivr.net/npm/media-chrome@1/+esm\" crossorigin=\"anonymous\"></script><script type=\"module\" src=\"https://cdn.jsdelivr.net/npm/hls-video-element@1.0/+esm\" crossorigin=\"anonymous\"></script><media-controller>\n            <hls-video\n              src=\"${source}\"\n              slot=\"media\"\n              volume=\"1\"\n              crossorigin\n              playsinline\n            ></hls-video>\n            <media-poster-image\n              slot=\"poster\"\n              src=\"${poster}\">\n            </media-poster-image>\n            <media-loading-indicator slot=\"centered-chrome\" noautohide></media-loading-indicator>\n            <media-control-bar>\n              <media-play-button></media-play-button>\n              <media-time-range></media-time-range>\n              <media-time-display showduration remaining></media-time-display>\n              <media-fullscreen-button></media-fullscreen-button>\n            </media-control-bar>\n          </media-controller>`,\n        }}\n      ></div>\n    </div>\n  );\n}\n","import { VideoPlayerClient } from \"../client/video-player-client\";\nimport type { CastVideo } from \"../types\";\nimport { VideoPlayer } from \"./video-player\";\n\nexport function CastVideos({ videos, client }: { videos: CastVideo[]; client?: boolean }) {\n  return (\n    <div className=\"farcaster-embed-video-container\">\n      {videos.map((video: CastVideo) => {\n        return client ? (\n          <VideoPlayerClient\n            key={video.url}\n            source={video.sourceUrl}\n            aspectRatio={video.width / video.height}\n            poster={video.thumbnailUrl}\n          />\n        ) : (\n          <VideoPlayer\n            key={video.url}\n            source={video.sourceUrl}\n            aspectRatio={video.width / video.height}\n            poster={video.thumbnailUrl}\n          />\n        );\n      })}\n    </div>\n  );\n}\n","export const ReplyIcon = () => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n  >\n    <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"></path>\n  </svg>\n);\n\nexport const RecastIcon = () => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n  >\n    <path d=\"M17 2.1l4 4-4 4\" />\n    <path d=\"M3 12.2v-2a4 4 0 0 1 4-4h12.8M7 21.9l-4-4 4-4\" />\n    <path d=\"M21 11.8v2a4 4 0 0 1-4 4H4.2\" />\n  </svg>\n);\n\nexport const LikeIcon = () => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n  >\n    <path d=\"M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z\"></path>\n  </svg>\n);\n\nexport const FarcasterIcon = () => (\n  <svg width=\"24\" height=\"24\" viewBox=\"0 0 1260 1260\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <g clipPath=\"url(#fc-embed-clip1)\">\n      <path\n        d=\"M947.747 1259.61H311.861C139.901 1259.61 0 1119.72 0 947.752V311.871C0 139.907 139.901 0.00541362 311.861 0.00541362H947.747C1119.71 0.00541362 1259.61 139.907 1259.61 311.871V947.752C1259.61 1119.72 1119.71 1259.61 947.747 1259.61Z\"\n        fill=\"#472A91\"\n      ></path>\n      <path\n        d=\"M826.513 398.633L764.404 631.889L702.093 398.633H558.697L495.789 633.607L433.087 398.633H269.764L421.528 914.36H562.431L629.807 674.876L697.181 914.36H838.388L989.819 398.633H826.513Z\"\n        fill=\"white\"\n      ></path>\n    </g>\n    <defs>\n      <clipPath id=\"fc-embed-clip1\">\n        <rect width=\"1259.61\" height=\"1259.61\" fill=\"white\"></rect>\n      </clipPath>\n    </defs>\n  </svg>\n);\n","import React, { useState, useEffect } from \"react\";\nimport Linkify from \"linkify-react\";\n\ninterface CastTextFormatterProps {\n  text: string;\n  maxLength?: number;\n  className?: string;\n  onSdkLinkClick?: (e: React.MouseEvent<HTMLAnchorElement>) => void;\n  embeddedUrls?: string[];\n}\n\nconst getLinkifyOptions = (\n  onSdkLinkClick?: (e: React.MouseEvent<HTMLAnchorElement>) => void,\n  embeddedUrls: string[] = []\n) => ({\n  className: (href: string) => {\n    const baseClass = \"farcaster-embed-body-link\";\n    return embeddedUrls.includes(href) ? `${baseClass} embedded` : baseClass;\n  },\n  target: \"_blank\",\n  attributes: onSdkLinkClick ? {\n    onClick: (e: React.MouseEvent<HTMLAnchorElement>) => {\n      const href = e.currentTarget.getAttribute(\"href\") || \"\";\n      // If this URL is embedded, prevent clicking\n      if (embeddedUrls.includes(href)) {\n        e.preventDefault();\n        return;\n      }\n      // Otherwise, handle normally\n      onSdkLinkClick(e);\n    }\n  } : undefined\n});\n\nexport function CastTextFormatter({ \n  text, \n  maxLength = 280, \n  className = \"\",\n  onSdkLinkClick,\n  embeddedUrls = []\n}: CastTextFormatterProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  useEffect(() => {\n    setIsExpanded(false);\n  }, [text, maxLength]);\n\n  if (!text) {\n    return null;\n  }\n\n  const shouldTruncate = text.length > maxLength;\n  const displayText = shouldTruncate && !isExpanded ? text.substring(0, maxLength) : text;\n\n\n\n  const renderText = () => {\n    return (\n      <Linkify as=\"span\" options={getLinkifyOptions(onSdkLinkClick, embeddedUrls)}>\n        {displayText}\n      </Linkify>\n    );\n  };\n\n  if (!shouldTruncate) {\n    return (\n      <span className={className}>\n        {renderText()}\n      </span>\n    );\n  }\n\n  return (\n    <span className={className}>\n      {renderText()}\n      {isExpanded ? (\n        <button\n          onClick={() => setIsExpanded(false)}\n          style={{ \n            marginLeft: 4, \n            color: \"#FF6200\", \n            background: \"none\", \n            border: \"none\", \n            cursor: \"pointer\", \n            textDecoration: \"underline\" \n          }}\n        >\n          see less\n        </button>\n      ) : (\n        <button\n          onClick={() => setIsExpanded(true)}\n          style={{ \n            marginLeft: 4, \n            color: \"#FF6200\", \n            background: \"none\", \n            border: \"none\", \n            cursor: \"pointer\", \n            textDecoration: \"underline\" \n          }}\n        >\n          see more...\n        </button>\n      )}\n    </span>\n  );\n} ","import type { FarcasterEmbedOptions } from \"../options\";\nimport type { CastData } from \"../types\";\nimport { CastImages } from \"./cast-images\";\nimport { CastVideos } from \"./cast-videos\";\nimport { LikeIcon, RecastIcon, ReplyIcon, FarcasterIcon } from \"./icons\";\nimport { CastTextFormatter } from \"./cast-text-formatter\";\n// Import the SDK (assume user will polyfill or provide it in their app)\n// @ts-ignore\nimport { sdk } from \"@farcaster/miniapp-sdk\";\n\n\n\nfunction stripLastEmbedUrlFromCastBody(source: string, target: string) {\n  if (source.endsWith(target)) {\n    let startIndex = source.lastIndexOf(target);\n    let sourceWithoutTarget = source.substring(0, startIndex);\n    let lastNewLineIndex = sourceWithoutTarget.lastIndexOf(\"\\n\");\n    if (lastNewLineIndex !== -1) {\n      sourceWithoutTarget =\n        sourceWithoutTarget.substring(0, lastNewLineIndex) + sourceWithoutTarget.substring(lastNewLineIndex + 1);\n    }\n    return sourceWithoutTarget + source.substring(startIndex + target.length);\n  } else {\n    return source;\n  }\n}\n\nfunction handleSdkLinkClick(e: React.MouseEvent<HTMLAnchorElement>) {\n  const href = e.currentTarget.getAttribute(\"href\") || \"\";\n  \n  // Profile: https://farcaster.xyz/~/profiles/123\n  if (/\\/~\\/profiles\\/(\\d+)$/.test(href)) {\n    e.preventDefault();\n    const fid = parseInt(href.split(\"/\").pop() || \"0\");\n    if (fid && sdk?.actions?.viewProfile) {\n      sdk.actions.viewProfile({ fid });\n    } else {\n      // Fallback: open in new tab if SDK not available\n      window.open(href, \"_blank\");\n    }\n    return;\n  }\n  \n  // Cast: https://farcaster.xyz/username/0x...\n  if (/\\/0x[0-9a-fA-F]+$/.test(href)) {\n    e.preventDefault();\n    const hash = href.split(\"/\").pop();\n    if (hash && sdk?.actions?.viewCast) {\n      sdk.actions.viewCast({ hash });\n    } else {\n      // Fallback: open in new tab if SDK not available\n      window.open(href, \"_blank\");\n    }\n    return;\n  }\n  \n  // External links - show warning and open in new tab\n  if (href && !href.startsWith(\"https://farcaster.xyz\")) {\n    e.preventDefault();\n    const confirmed = window.confirm(\"You are being redirected out of the app. Continue?\");\n    if (confirmed) {\n      window.open(href, \"_blank\");\n    }\n    return;\n  }\n  \n  // Otherwise, let browser handle (internal farcaster links)\n}\n\nexport function CastEmbed({\n  cast,\n  client,\n  options,\n}: {\n  cast: CastData;\n  client?: boolean;\n  options: FarcasterEmbedOptions;\n}) {\n  if (!cast) return null;\n\n  const author = cast.author;\n  const profileUrl = `https://farcaster.xyz/~/profiles/${author.fid}`;\n  const publishedAt = new Date(cast.timestamp);\n  const timestamp = publishedAt.toLocaleString(options.timestampLocale, options.timestampFormat);\n  const fullTimestamp = publishedAt.toLocaleString(\"en-US\", {\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\",\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n  const farcasterUrl = `https://farcaster.xyz/${author.username}/${cast.hash}`;\n  const replies = cast.replies && cast.replies.count;\n  const likes = cast.reactions && cast.reactions.count;\n  const recasts = cast.combinedRecastCount ? cast.combinedRecastCount : cast.recasts.count;\n  const images = cast.embeds && cast.embeds.images;\n  const hasImages = images && images.length > 0;\n  const hasVideos = cast.embeds && cast.embeds.videos && cast.embeds.videos.length > 0;\n  const videos = cast.embeds && cast.embeds.videos;\n  const hasUrls = cast.embeds && cast.embeds.urls && cast.embeds.urls.length > 0;\n  const urls = cast.embeds && cast.embeds.urls;\n  const quoteCasts = cast.embeds && cast.embeds.casts;\n\n  const mainText = cast.text;\n  \n  // Get URLs that are embedded (quote casts and URL embeds)\n  const embeddedUrls: string[] = [];\n  \n  // Add quote cast URLs\n  if (quoteCasts) {\n    quoteCasts.forEach(quoteCast => {\n      const quoteUrl = `https://farcaster.xyz/${quoteCast.author.username}/${quoteCast.hash}`;\n      embeddedUrls.push(quoteUrl);\n    });\n  }\n  \n  // Add URL embed URLs\n  if (urls) {\n    urls.forEach(urlItem => {\n      if (urlItem.openGraph?.url) {\n        embeddedUrls.push(urlItem.openGraph.url);\n      }\n    });\n  }\n\n  return (\n    <div className=\"not-prose farcaster-embed-container\">\n      <div>\n        <div className=\"farcaster-embed-metadata\">\n          <a href={profileUrl} className=\"farcaster-embed-avatar-link\" onClick={handleSdkLinkClick}>\n            <div className=\"farcaster-embed-author-avatar-container\">\n              <img src={author.pfp.url} alt={`@${author.username}`} className=\"farcaster-embed-author-avatar\" />\n            </div>\n          </a>\n          <div className=\"farcaster-embed-author\">\n            <p className=\"farcaster-embed-author-display-name\">{author.displayName}</p>\n            <p className=\"farcaster-embed-author-username\">@{author.username}</p>\n          </div>\n          <div className=\"farcaster-embed-timestamp\">\n            <p title={fullTimestamp}>{timestamp}</p>\n          </div>\n        </div>\n        <div className=\"farcaster-embed-body\" style={{ wordWrap: \"break-word\" }}>\n          <CastTextFormatter \n            text={mainText} \n            maxLength={280} \n            onSdkLinkClick={handleSdkLinkClick}\n            embeddedUrls={embeddedUrls}\n          />\n          {hasImages && <CastImages images={images} />}\n          {hasVideos && <CastVideos videos={videos} client={client} />}\n          {hasUrls && (\n            <div className=\"farcaster-embed-urls-container\">\n              {urls\n                .map((item, index) => {\n                const { description, domain, image, title, url, useLargeImage } = item.openGraph || {};\n                const isTwitter = domain === \"twitter.com\" || domain === \"t.co\" || domain === \"x.com\";\n\n                if (useLargeImage) {\n                  return (\n                    <a key={index} href={url} target=\"_blank\" className=\"farcaster-embed-url-link\" onClick={handleSdkLinkClick}>\n                      {image && <img src={image} alt={title} className=\"farcaster-embed-url-image\" />}\n                      <span className=\"farcaster-embed-url-metadata\">\n                        <span className=\"farcaster-embed-url-title\">{title}</span>\n                        {description && <span className=\"farcaster-embed-url-description\">{description}</span>}\n                        {domain && <span className=\"farcaster-embed-url-domain\">{domain}</span>}\n                      </span>\n                    </a>\n                  );\n                }\n\n                return (\n                  <a\n                    key={index}\n                    href={url}\n                    target=\"_blank\"\n                    className=\"farcaster-embed-url-link farcaster-embed-url-link-compact\"\n                    onClick={handleSdkLinkClick}\n                  >\n                    {image && !isTwitter && <img src={image} alt={title} className=\"farcaster-embed-url-image\" />}\n                    <span className=\"farcaster-embed-url-metadata\">\n                      <span className=\"farcaster-embed-url-title\">{title}</span>\n                      {description && <span className=\"farcaster-embed-url-description\">{description}</span>}\n                      {domain && <span className=\"farcaster-embed-url-domain\">{domain}</span>}\n                    </span>\n                  </a>\n                );\n              })}\n            </div>\n          )}\n        </div>\n        {cast.tags.length > 0 && (\n          <div>\n            <div className=\"farcaster-embed-channel\">\n              {cast.tags[0].imageUrl && (\n                <div className=\"farcaster-embed-channel-avatar-container\">\n                  <img src={cast.tags[0].imageUrl} alt={cast.tags[0].name} className=\"farcaster-embed-channel-avatar\" width={16} height={16} />\n                </div>\n              )}\n              {cast.tags[0].name && <p className=\"farcaster-embed-channel-name\">{cast.tags[0].name}</p>}\n            </div>\n          </div>\n        )}\n      </div>\n      <div className=\"farcaster-embed-stats\">\n        <ul>\n          <li>\n            <a className=\"farcaster-embed-stats-link\" href={farcasterUrl} target=\"_blank\" onClick={handleSdkLinkClick}>\n              <ReplyIcon />\n              <span>{replies.toLocaleString(\"en-US\")}</span>\n            </a>\n          </li>\n          <li>\n            <a className=\"farcaster-embed-stats-link\" href={farcasterUrl} target=\"_blank\" onClick={handleSdkLinkClick}>\n              <RecastIcon />\n              <span>{recasts.toLocaleString(\"en-US\")}</span>\n            </a>\n          </li>\n          <li>\n            <a className=\"farcaster-embed-stats-link\" href={farcasterUrl} target=\"_blank\" onClick={handleSdkLinkClick}>\n              <LikeIcon />\n              <span>{likes.toLocaleString(\"en-US\")}</span>\n            </a>\n          </li>\n        </ul>\n        <div className=\"farcaster-embed-farcaster-icon\">\n          <a href={farcasterUrl} title=\"Show on farcaster\" target=\"_blank\" className=\"farcaster-embed-farcaster-link\" onClick={handleSdkLinkClick}>\n            <FarcasterIcon />\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}\n","export type FarcasterEmbedOptions = {\n  timestampFormat?: Intl.DateTimeFormatOptions;\n  timestampLocale?: string;\n  customEndpoint?: string;\n  silentError?: boolean;\n  onLinkClick?: (url: string, event?: React.MouseEvent) => void;\n  maxTextLength?: number;\n};\n\nexport const defaultOptions: FarcasterEmbedOptions = {\n  timestampFormat: {\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\",\n  },\n  timestampLocale: \"en-US\",\n  silentError: false,\n};\n"],"mappings":"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","names":["cast","import_jsx_runtime","React","import_jsx_runtime","import_jsx_runtime","import_jsx_runtime","import_react","import_jsx_runtime","Linkify","import_jsx_runtime","import_jsx_runtime"]}